// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Sofomo.Weather.Infrastructure.WeatherForecastApi.Database.Context;

#nullable disable

namespace Sofomo.Weather.Infrastructure.Migrations
{
    [DbContext(typeof(SofomoContext))]
    [Migration("20241026160527_unitsNullable")]
    partial class unitsNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sofomo.Weather.Domain.Entities.Geolocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.HasKey("Id");

                    b.ToTable("Geolocations", (string)null);
                });

            modelBuilder.Entity("Sofomo.Weather.Domain.Entities.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GeolocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MaxTemperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxUvIndex")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinTemperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RainSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WeatherTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("WeatherUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationId");

                    b.HasIndex("WeatherTypeId");

                    b.HasIndex("WeatherUnitId")
                        .IsUnique();

                    b.ToTable("WeatherForecasts", (string)null);
                });

            modelBuilder.Entity("Sofomo.Weather.Domain.Entities.WeatherType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("WeatherTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "ClearSky"
                        },
                        new
                        {
                            Id = 1,
                            Description = "MainlyClear"
                        },
                        new
                        {
                            Id = 2,
                            Description = "PartlyCloudy"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Overcast"
                        },
                        new
                        {
                            Id = 45,
                            Description = "Fog"
                        },
                        new
                        {
                            Id = 48,
                            Description = "DepositingRimeFog"
                        },
                        new
                        {
                            Id = 51,
                            Description = "DrizzleLight"
                        },
                        new
                        {
                            Id = 53,
                            Description = "DrizzleModerate"
                        },
                        new
                        {
                            Id = 55,
                            Description = "DrizzleDense"
                        },
                        new
                        {
                            Id = 56,
                            Description = "FreezingDrizzleLight"
                        },
                        new
                        {
                            Id = 57,
                            Description = "FreezingDrizzleDense"
                        },
                        new
                        {
                            Id = 61,
                            Description = "RainSlight"
                        },
                        new
                        {
                            Id = 63,
                            Description = "RainModerate"
                        },
                        new
                        {
                            Id = 65,
                            Description = "RainHeavy"
                        },
                        new
                        {
                            Id = 66,
                            Description = "FreezingRainLight"
                        },
                        new
                        {
                            Id = 67,
                            Description = "FreezingRainHeavy"
                        },
                        new
                        {
                            Id = 71,
                            Description = "SnowfallSlight"
                        },
                        new
                        {
                            Id = 73,
                            Description = "SnowfallModerate"
                        },
                        new
                        {
                            Id = 75,
                            Description = "SnowfallHeavy"
                        },
                        new
                        {
                            Id = 77,
                            Description = "SnowGrains"
                        },
                        new
                        {
                            Id = 80,
                            Description = "RainShowersSlight"
                        },
                        new
                        {
                            Id = 81,
                            Description = "RainShowersModerate"
                        },
                        new
                        {
                            Id = 82,
                            Description = "RainShowersViolent"
                        },
                        new
                        {
                            Id = 85,
                            Description = "SnowShowersSlight"
                        },
                        new
                        {
                            Id = 86,
                            Description = "SnowShowersHeavy"
                        },
                        new
                        {
                            Id = 95,
                            Description = "ThunderstormSlight"
                        },
                        new
                        {
                            Id = 96,
                            Description = "ThunderstormModerate"
                        },
                        new
                        {
                            Id = 99,
                            Description = "ThunderstormHeavyHail"
                        });
                });

            modelBuilder.Entity("Sofomo.Weather.Domain.Entities.WeatherUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaxTemperatureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxUvIndexUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinTemperatureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RainSumUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherCodeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WeatherUnits");
                });

            modelBuilder.Entity("Sofomo.Weather.Domain.Entities.WeatherForecast", b =>
                {
                    b.HasOne("Sofomo.Weather.Domain.Entities.Geolocation", "Geolocation")
                        .WithMany("WeatherForecasts")
                        .HasForeignKey("GeolocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sofomo.Weather.Domain.Entities.WeatherType", "WeatherType")
                        .WithMany()
                        .HasForeignKey("WeatherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sofomo.Weather.Domain.Entities.WeatherUnit", "WeatherUnit")
                        .WithOne("WeatherForecast")
                        .HasForeignKey("Sofomo.Weather.Domain.Entities.WeatherForecast", "WeatherUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geolocation");

                    b.Navigation("WeatherType");

                    b.Navigation("WeatherUnit");
                });

            modelBuilder.Entity("Sofomo.Weather.Domain.Entities.Geolocation", b =>
                {
                    b.Navigation("WeatherForecasts");
                });

            modelBuilder.Entity("Sofomo.Weather.Domain.Entities.WeatherUnit", b =>
                {
                    b.Navigation("WeatherForecast");
                });
#pragma warning restore 612, 618
        }
    }
}
